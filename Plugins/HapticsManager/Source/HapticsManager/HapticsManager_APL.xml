<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<trace enable="true"/>
	<init>
		<log text="AndroidAPITemplate init"/>		
	</init>

  <androidManifestUpdates>
    <addElements tag="application">
	    <activity android:name="com.bhaptics.player.AndroidPlayerActivity"
            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
            android:label="@string/app_name" />
      <service android:name="com.bhaptics.tact.ble.BhapticsService">
        <intent-filter>
          <action android:name="com.bhaptics.player.Service" />
          <action android:name="android.intent.action.MAIN" />
          <category android:name="android.intent.category.DEFAULT" />
        </intent-filter>
      </service>
    </addElements>
    <addPermission android:name="android.permission.BLUETOOTH" />
    <addPermission android:name="android.permission.BLUETOOTH_ADMIN" />
    <addPermission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <addPermission android:name="android.permission.ACCESS_FINE_LOCATION" />
  </androidManifestUpdates>

  <!-- optional additions to proguard -->
  <proguardAdditions>
    <insert><![CDATA[
      -keepattributes Signature
      -dontskipnonpubliclibraryclassmembers

     -keepclassmembers class com.epicgames.ue4.GameActivity {
            public <methods>;
            public <fields>;
     }
    ]]></insert>
  </proguardAdditions>

  <prebuildCopies>
    <log text="Copying example java method directory to staging before build"/>
    <copyFile src="$S(PluginDir)/Library/bhaptics_ble_1.01.aar"
            dst="$S(BuildDir)/gradle/bhaptics_ble_1.01.aar" />
    <copyFile src="$S(PluginDir)/Library/bhaptics_commons_1.01.aar"
            dst="$S(BuildDir)/gradle/bhaptics_commons_1.01.aar" />
    <copyFile src="$S(PluginDir)/Library/bhaptics_core_1.01.aar"
            dst="$S(BuildDir)/gradle/bhaptics_core_1.01.aar" />
    <copyFile src="$S(PluginDir)/Library/bhaptics_manager_1.01.aar"
            dst="$S(BuildDir)/gradle/bhaptics_manager_1.01.aar" />
  </prebuildCopies>

  <AARImports>
  </AARImports>

  <buildGradleAdditions>
    <insert>
      dependencies {
        implementation files('../bhaptics_ble_1.01.aar')
        implementation files('../bhaptics_core_1.01.aar')
        implementation files('../bhaptics_commons_1.01.aar')
        implementation files('../bhaptics_manager_1.01.aar')
      }
    </insert>
  </buildGradleAdditions>
  
  <!-- optional additions to the GameActivity imports in GameActivity.java -->
	<gameActivityImportAdditions>
	  <insert>
      import org.json.JSONArray;
      import org.json.JSONException;
      import org.json.JSONObject;
      import java.util.List;
    </insert>
	</gameActivityImportAdditions>
	

	<!-- optional additions to the GameActivity class in GameActivity.java -->
	<gameActivityClassAdditions>
		<insert>
      <![CDATA[
      private com.bhaptics.bhapticsmanger.BhapticsManager bhapticsManager;
      private com.bhaptics.bhapticsmanger.HapticPlayer player;
      private String LatestDeviceStatus = "";
      private String LatestScanStatus = "";
      private String LatestPlayerResponse = "";
      private static final String TAG = "HAPTIC_WRAPPER";
      
      public native void nativeOnDeviceFound(String deviceListString);
      public native void nativeOnChangeScanState(String scanningState);
      public native void nativeOnChangeResponse(String changeResponse);
      
      //Helper Functions
      private static String DeviceToJsonString(List<com.bhaptics.commons.model.BhapticsDevice> devices) {
        JSONArray jsonArray = new JSONArray();

        for (com.bhaptics.commons.model.BhapticsDevice device : devices) {
            JSONObject obj = DeviceToJsonObject(device);

            if (obj == null) {
                android.util.Log.i(TAG, "toJsonString: failed to parse. " + device);
                continue;
            }
            jsonArray.put(obj);
        }

        return jsonArray.toString();
      }

      private static JSONObject DeviceToJsonObject(com.bhaptics.commons.model.BhapticsDevice device) {
        try {
            JSONObject obj = new JSONObject();
            obj.put("DeviceName", device.getDeviceName());
            obj.put("Address", device.getAddress());
            obj.put("Battery", device.getBattery());
            obj.put("Position", device.getPosition());
            obj.put("ConnectionStatus", device.getConnectionStatus().toString());
            obj.put("IsPaired", device.isPaired());
            return obj;
        } catch (JSONException e) {
            android.util.Log.d(TAG, "toJsonObject: " + e.getMessage());
        }
        return null;
      }

      private static String ResponseToJsonString(com.bhaptics.bhapticsmanger.PlayerResponse response) {
        try {
            JSONObject resultJson = new JSONObject();
            resultJson.put("ConnectedDeviceCount", response.getConnectedDeviceCount());
            
            JSONArray connectedPositions  = new JSONArray();
            resultJson.put("ConnectedPositions", connectedPositions);
            for (com.bhaptics.commons.model.PositionType pos : response.getConnectedPositions()) {
                connectedPositions.put(pos.toString());
            }

            JSONArray registeredKey  = new JSONArray();
            resultJson.put("RegisteredKeys", registeredKey);
            for (String key : response.getRegisteredKeys()) {
                registeredKey.put(key);
            }
            JSONArray activeKeys  = new JSONArray();
            resultJson.put("ActiveKeys", activeKeys);
            for (String key : response.getActiveKeys()) {
                activeKeys.put(key);
            }

            JSONObject status =  new JSONObject();
            resultJson.put("Status", status);
            for (String position : response.getStatus().keySet()) {
                if (com.bhaptics.commons.model.PositionType.Vest.toString().equals(position)) {
                    // status wants to get VestFront and VestBack
                    continue;
                }
                JSONArray motorValues = new JSONArray();
                byte[] values = response.getStatus().get(position);

                for (int i = 0; i < values.length; i++) {
                    motorValues.put(values[i]);
                }

                status.put(position, motorValues);
            }

            return resultJson.toString();
        } catch (JSONException e) {
            android.util.Log.e(TAG, "feedbackResponse: " + e.getMessage(), e);
        } catch (Exception e) {
            android.util.Log.e(TAG, "unknown: " + e.getMessage(), e);
        }

        return "";
      }

      //Bluetooth Functionality
      public void AndroidThunkJava_Scan() {
        Log.warn("StartScan");
        bhapticsManager.scan();
      }
      public void AndroidThunkJava_StopScan() {
        bhapticsManager.stopScan();
      }
      
      public boolean AndroidThunkJava_IsScanning() {
        return bhapticsManager.isScanning();
      }
      
      //Submit to player
      public void AndroidThunkJava_Submit(String str) {
        player.submit(str);
      }

      // Device Settings
      public void AndroidThunkJava_Pair(String address) {
        bhapticsManager.pair(address);
      }

      public void AndroidThunkJava_Unpair(String address) {
        bhapticsManager.unpair(address);
      }

      public void AndroidThunkJava_UnpairAll() {
        bhapticsManager.unpairAll();
      }

      public void AndroidThunkJava_ChangePosition(String address, String pos){
        bhapticsManager.changePosition(address, com.bhaptics.commons.model.PositionType.valueOf(pos));
      }

      public void AndroidThunkJava_TogglePosition(String address) {
        bhapticsManager.togglePosition(address);
      }

      public void AndroidThunkJava_Ping(String address) {
        bhapticsManager.ping(address);
      }
      public void AndroidThunkJava_PingAll() {
        bhapticsManager.pingAll();
      }

      public String AndroidThunkJava_GetDeviceList() {
          List<com.bhaptics.commons.model.BhapticsDevice> deviceList = bhapticsManager.getDeviceList();
          return DeviceToJsonString(deviceList);
      }

      public String AndroidThunkJava_GetLatestScanStatus() {
          return LatestScanStatus;
      }

      public String AndroidThunkJava_GetLatestPlayerResponse() {
          return LatestPlayerResponse;
      }
    ]]>
    </insert>
	</gameActivityClassAdditions>
	
	<!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
	<gameActivityReadMetadataAdditions>
	<insert>

  </insert>
	</gameActivityReadMetadataAdditions>
	
	<!-- optional additions to GameActivity onCreate in GameActivity.java -->
	<gameActivityOnCreateAdditions>
		<insert>
      <![CDATA[
        player = new com.bhaptics.bhapticsmanger.HapticPlayerImpl();
        bhapticsManager = new com.bhaptics.bhapticsmanger.BhapticsManagerImpl(this, player);
        bhapticsManager.addBhapticsManageCallback(new com.bhaptics.bhapticsmanger.BhapticsManagerCallback() {
          @Override
          public void onDeviceUpdate(List<com.bhaptics.commons.model.BhapticsDevice> deviceList) {
              LatestDeviceStatus = DeviceToJsonString(deviceList);
              nativeOnDeviceFound(LatestDeviceStatus);
          }

          @Override
          public void onScanStatusChange(boolean scanning) {
              LatestScanStatus = scanning +"";
              nativeOnChangeScanState(LatestScanStatus);
          }

          @Override
          public void onChangeResponse(com.bhaptics.bhapticsmanger.PlayerResponse response) {
              LatestPlayerResponse = ResponseToJsonString(response);
              nativeOnChangeResponse(LatestPlayerResponse);
          }
        });
      ]]>
    </insert>
	</gameActivityOnCreateAdditions>

	<!-- optional additions to GameActivity onDestroy in GameActivity.java -->
	<gameActivityOnDestroyAdditions>
		<insert>
		
		</insert>
	</gameActivityOnDestroyAdditions>
	
	
	<!-- optional additions to GameActivity onStart in GameActivity.java -->
	<gameActivityOnStartAdditions>
		<insert>

    </insert>
	</gameActivityOnStartAdditions>

	<!-- optional additions to GameActivity onStop in GameActivity.java -->
	<gameActivityOnStopAdditions>
		<insert>
		
		</insert>
	</gameActivityOnStopAdditions>
	

	<!-- optional additions to GameActivity onPause in GameActivity.java	-->
	<gameActivityOnPauseAdditions>
    <insert>
    <![CDATA[
    ]]>
    </insert>
  </gameActivityOnPauseAdditions>


  <!-- optional additions to GameActivity onResume in GameActivity.java	-->
  <gameActivityOnResumeAdditions>
    <insert>
    </insert>
  </gameActivityOnResumeAdditions>


	<!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
	<gameActivityOnActivityResultAdditions>
		<insert>
		</insert>
    </gameActivityOnActivityResultAdditions>
	

	<!-- optional libraries to load in GameActivity.java before libUE4.so -->
	<soLoadLibrary>
	</soLoadLibrary>
</root>
