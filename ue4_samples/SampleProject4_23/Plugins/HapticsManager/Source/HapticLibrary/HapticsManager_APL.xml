<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <!-- init section is always evaluated once per architecture -->
  <trace enable="true"/>
  <init>
    <log text="AndroidAPITemplate init"/>
  </init>

  <androidManifestUpdates>
    <addPermission android:name="android.permission.BLUETOOTH" />
    <addPermission android:name="android.permission.BLUETOOTH_ADMIN" />
    <addPermission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <addPermission android:name="android.permission.ACCESS_FINE_LOCATION" />
  </androidManifestUpdates>

  <!-- optional additions to proguard -->
  <proguardAdditions>
    <insert>
      <![CDATA[
      -keepattributes Signature
      -dontskipnonpubliclibraryclassmembers

     -keepclassmembers class com.epicgames.ue4.GameActivity {
            public <methods>;
            public <fields>;
     }
	 -keep class com.bhaptics.** {
		*;
	}
    ]]>
    </insert>
  </proguardAdditions>

  <prebuildCopies>
    <log text="Copying bhaptics aar files"/>
    <copyFile src="$S(PluginDir)/Android/bhaptics_ble.aar"
            dst="$S(BuildDir)/gradle/bhaptics_ble.aar" />
    <copyFile src="$S(PluginDir)/Android/bhaptics_commons.aar"
            dst="$S(BuildDir)/gradle/bhaptics_commons.aar" />
    <copyFile src="$S(PluginDir)/Android/bhaptics_core.aar"
            dst="$S(BuildDir)/gradle/bhaptics_core.aar" />
    <copyFile src="$S(PluginDir)/Android/bhaptics_manager.aar"
            dst="$S(BuildDir)/gradle/bhaptics_manager.aar" />
  </prebuildCopies>

  <AARImports>
  </AARImports>

  <buildGradleAdditions>
    <insert>
      dependencies {
      implementation files('../bhaptics_ble.aar')
      implementation files('../bhaptics_core.aar')
      implementation files('../bhaptics_commons.aar')
      implementation files('../bhaptics_manager.aar')
      }
    </insert>
  </buildGradleAdditions>

  <!-- optional additions to the GameActivity imports in GameActivity.java -->
  <gameActivityImportAdditions>
    <insert>
      import com.bhaptics.bhapticsmanger.SdkRequestHandler;
      import com.bhaptics.service.SimpleBhapticsDevice;

      import org.json.JSONArray;
      import org.json.JSONException;
      import org.json.JSONObject;

      import java.util.List;
    </insert>
  </gameActivityImportAdditions>


  <!-- optional additions to the GameActivity class in GameActivity.java -->
  <gameActivityClassAdditions>
    <insert>
      <![CDATA[
    private android.os.Handler handler = new android.os.Handler();
    private java.lang.Runnable run = new java.lang.Runnable() {

        @Override
        public void run() {
            handler.postDelayed(this, 500);

            LatestDeviceStatus = DeviceToJsonString(sdkRequestHandler.getDeviceList());
            nativeOnDeviceFound(LatestDeviceStatus);
            android.util.Log.e(TAG, "run: "  + LatestDeviceStatus);
        }
    };

    private SdkRequestHandler sdkRequestHandler;
    private String LatestDeviceStatus = "";
    private static final String TAG = "HAPTIC_WRAPPER";

    public native void nativeOnDeviceFound(String deviceListString);
    public native void nativeOnChangeScanState();
    public native void nativeOnChangeResponse();

    //Helper Functions
    private static String DeviceToJsonString(List<SimpleBhapticsDevice> devices) {
        JSONArray jsonArray = new JSONArray();

        for (SimpleBhapticsDevice device : devices) {
            JSONObject obj = DeviceToJsonObject(device);

            if (obj == null) {
                android.util.Log.i(TAG, "toJsonString: failed to parse. " + device);
                continue;
            }
            jsonArray.put(obj);
        }

        return jsonArray.toString();
    }

    private static JSONObject DeviceToJsonObject(SimpleBhapticsDevice device) {
        try {
            JSONObject obj = new JSONObject();
            obj.put("DeviceName", device.getDeviceName());
            obj.put("Address", device.getAddress());
            obj.put("Position", SimpleBhapticsDevice.positionToString(device.getPosition()));
            obj.put("ConnectionStatus", device.isConnected() ? "Connected" : "Disconnected");
            obj.put("IsPaired", device.isPaired());
            return obj;
        } catch (JSONException e) {
            android.util.Log.d(TAG, "toJsonObject: " + e.getMessage());
        }
        return null;
    }

    //Bluetooth Functionality
    public boolean AndroidThunkJava_Is_legacy() {
        return sdkRequestHandler.isLegacyMode();
    }

    //Bluetooth Functionality
    public void AndroidThunkJava_Scan() {
        if (!sdkRequestHandler.isScanning()) {
            sdkRequestHandler.toggleScan();
        }
    }

    public void AndroidThunkJava_StopScan() {
        if (sdkRequestHandler.isScanning()) {
            sdkRequestHandler.toggleScan();
        }
    }

    public boolean AndroidThunkJava_IsScanning() {
        return sdkRequestHandler.isScanning();
    }

    // Device Settings
    public void AndroidThunkJava_Pair(String address) {
        sdkRequestHandler.pair(address);
    }

    // Pair Device with positoin
    public void AndroidThunkJava_PairFromPosition(String address, String position) {
        sdkRequestHandler.pair(address);
        AndroidThunkJava_ChangePosition(address, position);
    }

    public void AndroidThunkJava_Unpair(String address) {
        sdkRequestHandler.unpair(address);
    }

    public void AndroidThunkJava_UnpairAll() {
        List<SimpleBhapticsDevice> deviceList = sdkRequestHandler.getDeviceList();

        for (SimpleBhapticsDevice device : deviceList) {
            if (device.isPaired()) {
                sdkRequestHandler.unpair(device.getAddress());
            }
        }
    }

    public void AndroidThunkJava_ChangePosition(String address, String position){
        int i = SimpleBhapticsDevice.stringToPosition(position);

        for (SimpleBhapticsDevice device : sdkRequestHandler.getDeviceList()) {
            if (device.getAddress().equals(address)) {
                if (device.getPosition() != i) {
                    sdkRequestHandler.togglePosition(address);
                }
                break;
            }
        }
    }

    public void AndroidThunkJava_TogglePosition(String address) {
        sdkRequestHandler.togglePosition(address);
    }

    public void AndroidThunkJava_Ping(String address) {
        sdkRequestHandler.ping(address);
    }
    public void AndroidThunkJava_PingAll() {
        List<SimpleBhapticsDevice> deviceList = sdkRequestHandler.getDeviceList();

        for (SimpleBhapticsDevice device : deviceList) {
            if (device.isConnected()) {
                sdkRequestHandler.ping(device.getAddress());
            }
        }
    }

    public String AndroidThunkJava_GetDeviceList() {
        List<SimpleBhapticsDevice> deviceList = sdkRequestHandler.getDeviceList();
        return DeviceToJsonString(deviceList);
    }

    public boolean AndroidThunkJava_GetLatestScanStatus() {
        return sdkRequestHandler.isScanning();
    }

    public void AndroidThunkJava_SubmitRegistered(String key, String altKey,
                                                  float intensity, float duration,
                                                  float offsetAngleX, float offsetY) {
        sdkRequestHandler.submitRegistered(key, altKey, intensity, duration, offsetAngleX, offsetY);
    }

    void  AndroidThunkJava_SubmitDot(String key, String position, int[] indexes, int[] intensities, int duration) {
        sdkRequestHandler.submitDot(key, position, indexes, intensities, duration);
    }
    void  AndroidThunkJava_SubmitPath(String key, String position, float[] x, float[] y, int[] intensities, int duration) {
        sdkRequestHandler.submitPath(key, position, x, y, intensities, duration);
    }

    public void AndroidThunkJava_Register(String key, String fileStr) {
        sdkRequestHandler.register(key, fileStr);
    }
    public void AndroidThunkJava_RegisterReflected(String key, String fileStr) {
        sdkRequestHandler.registerReflected(key, fileStr);
    }
    public void AndroidThunkJava_TurnOff(String key) {
        sdkRequestHandler.turnOff(key);
    }

    public void AndroidThunkJava_TurnOffAll() {
        sdkRequestHandler.turnOffAll();
    }

    public byte[] AndroidThunkJava_GetPositionStatus(String position) {
        return  sdkRequestHandler.getPositionStatus(position);
    }

    public boolean AndroidThunkJava_IsRegistered(String key) {
        return sdkRequestHandler.isRegistered(key);
    }
    public boolean AndroidThunkJava_IsPlaying(String key) {
        return sdkRequestHandler.isPlaying(key);
    }
    public boolean AndroidThunkJava_IsAnythingPlaying() {
        return sdkRequestHandler.isAnythingPlaying();
    }


    ]]>
    </insert>
  </gameActivityClassAdditions>

  <!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
  <gameActivityReadMetadataAdditions>
    <insert>

    </insert>
  </gameActivityReadMetadataAdditions>

  <!-- optional additions to GameActivity onCreate in GameActivity.java -->
  <gameActivityOnCreateAdditions>
    <insert>
      <![CDATA[
        
        sdkRequestHandler = new SdkRequestHandler(this, "appName");
        handler.postDelayed(run, 500);
      ]]>
    </insert>
  </gameActivityOnCreateAdditions>

  <!-- optional additions to GameActivity onDestroy in GameActivity.java -->
  <gameActivityOnDestroyAdditions>
    <insert>

    </insert>
  </gameActivityOnDestroyAdditions>


  <!-- optional additions to GameActivity onStart in GameActivity.java -->
  <gameActivityOnStartAdditions>
    <insert>

    </insert>
  </gameActivityOnStartAdditions>

  <!-- optional additions to GameActivity onStop in GameActivity.java -->
  <gameActivityOnStopAdditions>
    <insert>

    </insert>
  </gameActivityOnStopAdditions>


  <!-- optional additions to GameActivity onPause in GameActivity.java	-->
  <gameActivityOnPauseAdditions>
    <insert>
      <![CDATA[
    ]]>
    </insert>
  </gameActivityOnPauseAdditions>


  <!-- optional additions to GameActivity onResume in GameActivity.java	-->
  <gameActivityOnResumeAdditions>
    <insert>
    </insert>
  </gameActivityOnResumeAdditions>


  <!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
  <gameActivityOnActivityResultAdditions>
    <insert>
    </insert>
  </gameActivityOnActivityResultAdditions>


  <!-- optional libraries to load in GameActivity.java before libUE4.so -->
  <soLoadLibrary>
  </soLoadLibrary>
</root>
