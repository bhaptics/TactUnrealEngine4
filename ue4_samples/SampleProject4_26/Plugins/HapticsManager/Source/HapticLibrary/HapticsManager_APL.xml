<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <!-- init section is always evaluated once per architecture -->
  <trace enable="true"/>
  <init>
    <log text="HapticsManager_APL init"/>
  </init>

  <androidManifestUpdates>
    <addPermission android:name="android.permission.BLUETOOTH" />
    <addPermission android:name="android.permission.BLUETOOTH_ADMIN" />
  </androidManifestUpdates>

  <!-- optional additions to proguard -->
  <proguardAdditions>
    <insert>
      <![CDATA[
      -keepattributes Signature
      -dontskipnonpubliclibraryclassmembers

     -keepclassmembers class com.epicgames.ue4.GameActivity {
            public <methods>;
            public <fields>;
     }
	 -keep class com.bhaptics.** {
		*;
	}
    ]]>
    </insert>
  </proguardAdditions>

  <prebuildCopies>
    <log text="Copying bhaptics aar files"/>
    <copyFile src="$S(PluginDir)/Android/bhaptics_ble.aar"
            dst="$S(BuildDir)/gradle/bhaptics_ble.aar" />
    <copyFile src="$S(PluginDir)/Android/bhaptics_commons.aar"
            dst="$S(BuildDir)/gradle/bhaptics_commons.aar" />
    <copyFile src="$S(PluginDir)/Android/bhaptics_core.aar"
            dst="$S(BuildDir)/gradle/bhaptics_core.aar" />
    <copyFile src="$S(PluginDir)/Android/bhaptics_manager.aar"
            dst="$S(BuildDir)/gradle/bhaptics_manager.aar" />
  </prebuildCopies>

  <AARImports>
  </AARImports>

  <buildGradleAdditions>
    <insert>
      dependencies {
      implementation files('../bhaptics_ble.aar')
      implementation files('../bhaptics_core.aar')
      implementation files('../bhaptics_commons.aar')
      implementation files('../bhaptics_manager.aar')
      }
    </insert>
  </buildGradleAdditions>

  <!-- optional additions to the GameActivity class in GameActivity.java -->
  <gameActivityClassAdditions>
    <insert>
      <![CDATA[
    private static final String BHAPTICS_TAG = "bhaptics_WRAPPER";
    private com.bhaptics.bhapticsmanger.SdkRequestHandler sdkRequestHandler;

    private static String DeviceToJsonString(
            java.util.List<com.bhaptics.service.SimpleBhapticsDevice> devices) {
        try {
            org.json.JSONArray jsonArray = new org.json.JSONArray();

            for (com.bhaptics.service.SimpleBhapticsDevice device : devices) {
                org.json.JSONObject obj = DeviceToJsonObject(device);

                if (obj == null) {
                    android.util.Log.i(BHAPTICS_TAG, "toJsonString: failed to parse. " + device);
                    continue;
                }
                jsonArray.put(obj);
            }

            return jsonArray.toString();
        } catch (Exception e) {
            android.util.Log.e(BHAPTICS_TAG, "DeviceToJsonString: " + e.getMessage(), e);
        }

        return "[]";
    }
    private static org.json.JSONObject DeviceToJsonObject(com.bhaptics.service.SimpleBhapticsDevice device) {
        try {
            org.json.JSONObject obj = new org.json.JSONObject();
            obj.put("DeviceName", device.getDeviceName());
            obj.put("Address", device.getAddress());
            obj.put("Position", com.bhaptics.service.SimpleBhapticsDevice.positionToString(device.getPosition()));
            obj.put("IsConnected", device.isConnected());
            obj.put("IsPaired", device.isPaired());
            return obj;
        } catch (org.json.JSONException e) {
            android.util.Log.d(BHAPTICS_TAG, "toJsonObject: " + e.getMessage());
        }
        return null;
    }

    //Bluetooth Functionality
    public boolean AndroidThunkJava_Is_legacy() {
        return sdkRequestHandler.isLegacyMode();
    }
    public void AndroidThunkJava_Initialize(String appName) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_Initialize: " + appName);
        if (appName != null && !appName.isEmpty()) {
            com.bhaptics.bhapticsmanger.utils.DefaultHttpClient.APP_ID = appName;
        }
    }

    public String AndroidThunkJava_getDeviceList() {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_getDeviceList() ");
        return DeviceToJsonString(sdkRequestHandler.getDeviceList());
    }

    public void AndroidThunkJava_ChangePosition(String address, String position){
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_ChangePosition() " + address + ", " + position);
        int i = com.bhaptics.service.SimpleBhapticsDevice.stringToPosition(position);

        for (com.bhaptics.service.SimpleBhapticsDevice device : sdkRequestHandler.getDeviceList()) {
            if (device.getAddress().equals(address)) {
                if (device.getPosition() != i) {
                    sdkRequestHandler.togglePosition(address);
                }
                break;
            }
        }
    }

    public void AndroidThunkJava_TogglePosition(String address) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_TogglePosition() " + address);
        sdkRequestHandler.togglePosition(address);
    }

    public void AndroidThunkJava_Ping(String address) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_Ping() " + address);
        sdkRequestHandler.ping(address);
    }
    public void AndroidThunkJava_PingPosition(String pos) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_PingPosition() " + pos);
        for (com.bhaptics.service.SimpleBhapticsDevice simpleBhapticsDevice : sdkRequestHandler.getDeviceList()) {
            if (simpleBhapticsDevice.getPosition() == com.bhaptics.service.SimpleBhapticsDevice.stringToPosition(pos)) {
                sdkRequestHandler.ping(simpleBhapticsDevice.getAddress());
            }
        }
    }


    public void AndroidThunkJava_PingAll() {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_PingAll() ");
        java.util.List<com.bhaptics.service.SimpleBhapticsDevice> deviceList = sdkRequestHandler.getDeviceList();

        for (com.bhaptics.service.SimpleBhapticsDevice device : deviceList) {
            if (device.isConnected()) {
                sdkRequestHandler.ping(device.getAddress());
            }
        }
    }

    public String AndroidThunkJava_GetDeviceList() {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_GetDeviceList() ");
        java.util.List<com.bhaptics.service.SimpleBhapticsDevice> deviceList = sdkRequestHandler.getDeviceList();
        return DeviceToJsonString(deviceList);
    }

    public void AndroidThunkJava_SubmitRegistered(String key, String altKey,
                                                  float intensity, float duration,
                                                  float offsetAngleX, float offsetY) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_SubmitRegistered() ");
        sdkRequestHandler.submitRegistered(key, altKey, intensity, duration, offsetAngleX, offsetY);
    }

    public void  AndroidThunkJava_SubmitDot(String key, String position, int[] indexes, int[] intensities, int duration) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_SubmitDot() ");
        sdkRequestHandler.submitDot(key, position, indexes, intensities, duration);
    }
    public void  AndroidThunkJava_SubmitPath(String key, String position, float[] x, float[] y, int[] intensities, int duration) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_SubmitPath() ");
        sdkRequestHandler.submitPath(key, position, x, y, intensities, duration);
    }

    public void AndroidThunkJava_Register(String key, String fileStr) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_Register() " + key);
        sdkRequestHandler.register(key, fileStr);
    }
    public void AndroidThunkJava_RegisterReflected(String key, String fileStr) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_RegisterReflected() " + key);
        sdkRequestHandler.registerReflected(key, fileStr);
    }
    public void AndroidThunkJava_TurnOff(String key) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_TurnOff() " + key);
        sdkRequestHandler.turnOff(key);
    }

    public void AndroidThunkJava_TurnOffAll() {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_TurnOffAll() ");
        sdkRequestHandler.turnOffAll();
    }

    public byte[] AndroidThunkJava_GetPositionStatus(String position) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_GetPositionStatus() " + position);
        if (sdkRequestHandler == null) {
            android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_GetPositionStatus() null" );
            return new byte[20];
        }
        return  sdkRequestHandler.getPositionStatus(position);
    }

    public boolean AndroidThunkJava_IsRegistered(String key) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_IsRegistered() " + key );
        return sdkRequestHandler.isRegistered(key);
    }
    public boolean AndroidThunkJava_IsPlaying(String key) {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_IsPlaying() " + key );
        return sdkRequestHandler.isPlaying(key);
    }
    public boolean AndroidThunkJava_IsAnythingPlaying() {
        android.util.Log.d(BHAPTICS_TAG, "AndroidThunkJava_IsAnythingPlaying() " );
        return sdkRequestHandler.isAnythingPlaying();
    }
    ]]>
    </insert>
  </gameActivityClassAdditions>

  <!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
  <gameActivityReadMetadataAdditions>
    <insert>

    </insert>
  </gameActivityReadMetadataAdditions>

  <!-- optional additions to GameActivity onCreate in GameActivity.java -->
  <gameActivityOnCreateAdditions>
    <insert>
      <![CDATA[
        android.util.Log.d(BHAPTICS_TAG, "onCreate() ");
        sdkRequestHandler = new com.bhaptics.bhapticsmanger.SdkRequestHandler(this);
      ]]>
    </insert>
  </gameActivityOnCreateAdditions>

  <!-- optional additions to GameActivity onDestroy in GameActivity.java -->
  <gameActivityOnDestroyAdditions>
    <insert>
        <![CDATA[
        if (sdkRequestHandler != null) {
            android.util.Log.d(BHAPTICS_TAG, "onDestroy() : ");
            sdkRequestHandler.quit();
        }
      ]]>
    </insert>
  </gameActivityOnDestroyAdditions>


  <!-- optional additions to GameActivity onStart in GameActivity.java -->
  <gameActivityOnStartAdditions>
    <insert>

    </insert>
  </gameActivityOnStartAdditions>

  <!-- optional additions to GameActivity onStop in GameActivity.java -->
  <gameActivityOnStopAdditions>
    <insert>

    </insert>
  </gameActivityOnStopAdditions>


  <!-- optional additions to GameActivity onPause in GameActivity.java	-->
  <gameActivityOnPauseAdditions>
    <insert>
      <![CDATA[
    ]]>
    </insert>
  </gameActivityOnPauseAdditions>


  <!-- optional additions to GameActivity onResume in GameActivity.java	-->
  <gameActivityOnResumeAdditions>
    <insert>
        <![CDATA[
        if (sdkRequestHandler != null) {
            android.util.Log.d(BHAPTICS_TAG, "refreshPairing() : ");
            sdkRequestHandler.refreshPairing();
        }
      ]]>
    </insert>
  </gameActivityOnResumeAdditions>


  <!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
  <gameActivityOnActivityResultAdditions>
    <insert>
    </insert>
  </gameActivityOnActivityResultAdditions>


  <!-- optional libraries to load in GameActivity.java before libUE4.so -->
  <soLoadLibrary>
  </soLoadLibrary>
</root>
